{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synpasedl"
		},
		"RestService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RestService1'"
		},
		"bbaccstorageold_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'bbaccstorageold'"
		},
		"defaultstorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'defaultstorage'"
		},
		"jcinput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'jcinput'"
		},
		"synpasedl-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synpasedl-WorkspaceDefaultSqlServer'"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.yahoo.com"
		},
		"RestService1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "anonymous"
		},
		"bbaccstorageold_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://accsynapsestorage.dfs.core.windows.net/"
		},
		"synpasedl-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synpasedlstore.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/claytonvideosjc')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ClaytonHomesVideodata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "jcinput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "localstoreclayton",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/jcinput')]",
				"[concat(variables('workspaceId'), '/datasets/localstoreclayton')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tpchdata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "tpchdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "oldtpch",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "localstore",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/oldtpch')]",
				"[concat(variables('workspaceId'), '/datasets/localstore')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestResource1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jcinput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "jcinput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "models"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/jcinput')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/localstore')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synpasedl-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tpch",
						"fileSystem": "root"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synpasedl-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/localstoreclayton')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "defaultstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "claytonhomes/models",
						"container": "root"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/defaultstorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/oldtpch')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccstorageold",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tpchdata",
						"fileSystem": "synapseroot"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccstorageold')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('RestService1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RestService1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bbaccstorageold')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('bbaccstorageold_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('bbaccstorageold_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/defaultstorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('defaultstorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jcinput')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('jcinput_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synpasedl-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synpasedl-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synpasedl-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synpasedl-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bbfpdopvconf')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create database datagovdb;\n\nuse datagovdb;\nCREATE LOGIN [bbfpdopv] FROM EXTERNAL PROVIDER;\n\nuse datagovdb;\nCREATE USER [bbfpdopv] FOR LOGIN [bbfpdopv];\nALTER ROLE db_datareader ADD MEMBER [bbfpdopv];\n\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::[scoped_credential] TO [bbfpdopv];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "datagovdb",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tpschexttablecreation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'root_synpasedlstore_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [root_synpasedlstore_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://root@synpasedlstore.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE Nation (\n\t[N_NATIONKEY] numeric(38,0),\n\t[N_NAME] nvarchar(4000),\n\t[N_REGIONKEY] numeric(38,0),\n\t[N_COMMENT] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'tpch/NATION/**',\n\tDATA_SOURCE = [root_synpasedlstore_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.Nation\nGO\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synpasedlstore.dfs.core.windows.net/root/tpch/PART/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'root_synpasedlstore_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [root_synpasedlstore_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://root@synpasedlstore.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE customer (\n\t[C_CUSTKEY] numeric(9,0),\n\t[C_NAME] nvarchar(4000),\n\t[C_ADDRESS] nvarchar(4000),\n\t[C_NATIONKEY] numeric(38,0),\n\t[C_PHONE] nvarchar(4000),\n\t[C_ACCTBAL] numeric(9,2),\n\t[C_MKTSEGMENT] nvarchar(4000),\n\t[C_COMMENT] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'tpch/CUSTOMER/**',\n\tDATA_SOURCE = [root_synpasedlstore_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synpasedlstore.dfs.core.windows.net/root/tpch/PART/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synpasedlstore.dfs.core.windows.net/root/tpch/ORDERS/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n\nSELECT  top 100 * FROM\nOPENROWSET( BULK N'https://synpasedlstore.dfs.core.windows.net/root/tpch/PART/**', FORMAT = 'PARQUET') \nWITH (\n      P_PARTKEY DECIMAL(12,0), \n      P_NAME varchar(MAX),\n      P_MFGR varchar(max),\n\t  P_BRAND varchar(1000),\n\t  P_TYPE varchar(100),\n\t  P_CONTAINER varchar(50),\n\t  P_RETAILPRICE numeric(9,0),\n\t  P_COMMENT varchar(max)\n) as rows\n\n\nSELECT  top 100 * FROM\nOPENROWSET( BULK N'https://synpasedlstore.dfs.core.windows.net/root/tpch/NATION/**', FORMAT = 'PARQUET') \nWITH (\n    [N_NATIONKEY] numeric(38,0),\n\t[N_NAME] nvarchar(4000),\n\t[N_REGIONKEY] numeric(38,0),\n\t[N_COMMENT] nvarchar(4000)\n) as rows\n\n\nSELECT  top 100 * FROM\nOPENROWSET( BULK N'https://synpasedlstore.dfs.core.windows.net/root/tpch/CUSTOMER/**', FORMAT = 'PARQUET') \nWITH (\n\t[C_CUSTKEY] numeric(9,0),\n\t[C_NAME] nvarchar(4000),\n\t[C_ADDRESS] nvarchar(4000),\n\t[C_NATIONKEY] numeric(38,0),\n\t[C_PHONE] nvarchar(4000),\n\t[C_ACCTBAL] numeric(9,2),\n\t[C_MKTSEGMENT] nvarchar(4000),\n\t[C_COMMENT] nvarchar(4000)\n) as rows\n\n\nSELECT  top 100 * FROM\nOPENROWSET( BULK N'https://synpasedlstore.dfs.core.windows.net/root/tpch/ORDERS/**', FORMAT = 'PARQUET') \nWITH (\n\t[O_ORDERKEY] decimal(12,0),\n\t[O_CUSTKEY] decimal(12,0),\n\t[O_ORDERSTATUS] nvarchar(100),\n\t[O_TOTALPRICE] numeric(38,0),\n\t[O_ORDERDATE] DATE,\n\t[O_ORDERPRIORITY] varchar(200),\n\t[O_CLERK] nvarchar(100),\n\t[O_SHIPPRIORITY] decimal(38,0),\n\t[O_COMMENT] varchar(max)\n) as rows\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synpasedlstore.dfs.core.windows.net/root/tpch/LINEITEM/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\nSELECT  top 100 * FROM\nOPENROWSET( BULK N'https://synpasedlstore.dfs.core.windows.net/root/tpch/LINEITEM/**', FORMAT = 'PARQUET') \nWITH (\n\t[L_ORDERKEY] decimal(12,0),\n\t[L_PARTKEY] decimal(12,0),\n\t[L_SUPPKEY] decimal(12,0),\n\t[L_LINENUMBER] decimal(12,0),\n\t[L_QUANTITY] decimal(12,0),\n\t[L_EXTENDEDPRICE] numeric(38,0),\n\t[L_DISCOUNT] numeric(38,0),\n\t[L_TAX] numeric(38,0),\n\t[L_RETURNFLAG] varchar(200),\n\t[L_LINESTATUS] varchar(200),\n\t[L_COMMITDATE] DATE,\n\t[L_RECEIPTDATE] DATE,\n\t[L_SHIPINSTRUCT] varchar(max),\n\t[L_SHIPMODE] varchar(max)\n) as rows\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synpasedlstore.dfs.core.windows.net/root/tpch/PARTSUPP/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\nSELECT  top 100 * FROM\nOPENROWSET( BULK N'https://synpasedlstore.dfs.core.windows.net/root/tpch/PARTSUPP/**', FORMAT = 'PARQUET') \nWITH (\n    [PS_PARTKEY] decimal(38,0),\n\t[PS_SUPPKEY] decimal(38,0),\n\t[PS_AVAILQTY] decimal(38,0),\n\t[PS_SUPPLYCOST] decimal(38,4),\n\t[PS_COMMENT] nvarchar(4000)\n) as rows\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synpasedlstore.dfs.core.windows.net/root/tpch/REGION/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synpasedlstore.dfs.core.windows.net/root/tpch/SUPPLIER/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "datagovdb",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/downloadtpch')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark32",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "224g",
					"driverCores": 32,
					"executorMemory": "224g",
					"executorCores": 32,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "50a2217f-f7ac-4eb2-9ca6-d488647717bf"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/80ef7369-572a-4abd-b09a-033367f44858/resourceGroups/mlopsdeveast/providers/Microsoft.Synapse/workspaces/synpasedl/bigDataPools/spark32",
						"name": "spark32",
						"type": "Spark",
						"endpoint": "https://synpasedl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark32",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 32,
						"memory": 224
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"pip install wget"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import wget\r\n",
							"url = 'https://drive.google.com/file/d/14fyJnKFkCPcQw1q9dG0BE1t7RNNmYP8C/view?usp=sharing'\r\n",
							"#filename = wget.download(url)\r\n",
							"\r\n",
							"output_directory = 'tpch'\r\n",
							"filename = wget.download(url, out=output_directory)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"mssparkutils.fs.ls('/')"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark32')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 20,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "XLarge",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}